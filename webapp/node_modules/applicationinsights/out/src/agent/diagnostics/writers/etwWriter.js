"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EtwWriter = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const util_1 = require("../../../shared/util");
class EtwWriter {
    constructor() {
        const nodeMajVer = parseInt(process.versions.node.split('.')[0], 10);
        try {
            this._etwModule = this._loadEtwModule(nodeMajVer);
            if (this._etwModule) {
                console.log('AppInsightsAgent: Successfully loaded ETW');
            }
            else {
                console.log('AppInsightsAgent: ETW could not be loaded');
            }
        }
        catch (e) {
            console.log('Could not load ETW. Defaulting to console logging', e);
            this._etwModule = undefined;
        }
    }
    log(message, optional) {
        if (this._etwModule) {
            // eslint-disable-next-line @typescript-eslint/ban-types
            this._etwModule.logInfoEvent(message, ...optional);
        }
        else {
            console.log(util_1.Util.getInstance().stringify(message));
        }
    }
    error(message, optional) {
        if (this._etwModule) {
            // eslint-disable-next-line @typescript-eslint/ban-types
            this._etwModule.logErrEvent(message, ...optional);
        }
        else {
            console.error(util_1.Util.getInstance().stringify(message));
        }
    }
    _loadEtwModule(nodeMajVer) {
        // Try to load precompiled ETW module if it exists and is "importable"
        const dirname = path.join(__dirname, '../../../../../../../etw', `etw_${nodeMajVer}`);
        try {
            // throws an error if directory is not readable / does not exist
            fs.accessSync(dirname, fs.constants.R_OK);
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            return require(dirname);
        }
        catch (e) {
            // Could not load ETW, return nothing
            return undefined;
        }
    }
}
exports.EtwWriter = EtwWriter;
//# sourceMappingURL=etwWriter.js.map