{"version":3,"file":"aksLoader.js","sourceRoot":"","sources":["../../../src/agent/aksLoader.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport { DiagnosticLogger } from './diagnostics/diagnosticLogger';\r\nimport { FileWriter } from \"./diagnostics/writers/fileWriter\";\r\nimport { StatusLogger } from \"./diagnostics/statusLogger\";\r\nimport { AgentLoader } from \"./agentLoader\";\r\nimport { InstrumentationOptions } from '../types';\r\nimport { OTLPMetricExporter as OTLPProtoMetricExporter } from \"@opentelemetry/exporter-metrics-otlp-proto\";\r\nimport { OTLPMetricExporter as OTLPHttpMetricExporter } from \"@opentelemetry/exporter-metrics-otlp-http\";\r\nimport { MetricReader, PeriodicExportingMetricReader } from \"@opentelemetry/sdk-metrics\";\r\nimport { OTLP_METRIC_EXPORTER_EXPORT_INTERVAL } from './types';\r\n\r\nexport class AKSLoader extends AgentLoader {\r\n\r\n    constructor() {\r\n        super();\r\n        if (this._canLoad) {\r\n            (this._options.instrumentationOptions as InstrumentationOptions) = {\r\n                ...this._options.instrumentationOptions,\r\n                console: { enabled: true },\r\n                bunyan: { enabled: true },\r\n                winston: { enabled: true },\r\n            }\r\n\r\n            let statusLogDir = '/var/log/applicationinsights/';\r\n            if (this._isWindows) {\r\n                if (process.env.HOME) {\r\n                    statusLogDir = path.join(process.env.HOME, \"LogFiles\", \"ApplicationInsights\", \"status\");\r\n                }\r\n                else {\r\n                    statusLogDir = path.join(os.tmpdir(), \"Microsoft\", \"ApplicationInsights\", \"StatusMonitor\", \"LogFiles\", \"ApplicationInsights\", \"status\");\r\n                }\r\n            }\r\n            this._statusLogger = new StatusLogger(this._instrumentationKey, new FileWriter(statusLogDir, 'status_nodejs.json', {\r\n                append: false,\r\n                deleteOnExit: false,\r\n                renamePolicy: 'overwrite',\r\n                sizeLimit: 1024 * 1024,\r\n            }));\r\n\r\n            this._diagnosticLogger = new DiagnosticLogger(\r\n                this._instrumentationKey,\r\n                new FileWriter(\r\n                    statusLogDir,\r\n                    'applicationinsights-extension.log',\r\n                    {\r\n                        append: true,\r\n                        deleteOnExit: false,\r\n                        renamePolicy: 'overwrite',\r\n                        sizeLimit: 1024 * 1024, // 1 MB\r\n                    }\r\n                )\r\n            );\r\n\r\n            // Create metricReaders array and add OTLP reader if environment variables request it\r\n            try {\r\n                const metricReaders: MetricReader[] = [];\r\n                const metricsExporter = (process.env.OTEL_METRICS_EXPORTER || '').toLowerCase();\r\n                const exportersList = metricsExporter.split(',').map(exp => exp.trim());\r\n                const hasOtlpExporter = exportersList.includes('otlp');\r\n                \r\n                if (\r\n                    hasOtlpExporter &&\r\n                    (process.env.OTEL_EXPORTER_OTLP_ENDPOINT || process.env.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT)\r\n                ) {\r\n                    try {\r\n                        // Determine which exporter to use based on protocol setting\r\n                        const protocol = process.env.OTEL_EXPORTER_OTLP_METRICS_PROTOCOL || \r\n                                       process.env.OTEL_EXPORTER_OTLP_PROTOCOL;\r\n                        \r\n                        let otlpExporter;\r\n                        if (protocol === 'http/json') {\r\n                            otlpExporter = new OTLPHttpMetricExporter();\r\n                        } else {\r\n                            // Use protobuf for 'http/protobuf', 'grpc', or any other value\r\n                            otlpExporter = new OTLPProtoMetricExporter();\r\n                        }\r\n\r\n                        const otlpMetricReader = new PeriodicExportingMetricReader({\r\n                            exporter: otlpExporter,\r\n                            exportIntervalMillis: OTLP_METRIC_EXPORTER_EXPORT_INTERVAL,\r\n                        });\r\n\r\n                        metricReaders.push(otlpMetricReader);\r\n                    } catch (error) {\r\n                        console.warn(\"AKSLoader: Failed to create OTLP metric reader:\", error);\r\n                    }\r\n                }\r\n\r\n                // Attach metricReaders to the options so the distro can consume them\r\n                if ((metricReaders || []).length > 0) {\r\n                    this._options.metricReaders = metricReaders;\r\n                }\r\n            } catch (err) {\r\n                console.warn(\"AKSLoader: Error while preparing metricReaders:\", err);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}