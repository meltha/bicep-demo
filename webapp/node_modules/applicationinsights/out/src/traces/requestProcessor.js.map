{"version":3,"file":"requestProcessor.js","sourceRoot":"","sources":["../../../src/traces/requestProcessor.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,4CAAmE;AAGnE;;;GAGG;AACH,MAAa,oBAAoB;IAI7B,YAAY,yBAAkC,EAAE,sBAA+B;QAC3E,IAAI,CAAC,0BAA0B,GAAG,yBAAyB,CAAC;QAC5D,IAAI,CAAC,uBAAuB,GAAG,sBAAsB,CAAC;IAC1D,CAAC;IAED,UAAU;QACN,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,OAAO,CAAC,IAAU,EAAE,QAAiB;QACjC,IAAI,IAAI,CAAC,0BAA0B,KAAK,KAAK,EAAE;YAC3C,IAAI,IAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,QAAQ,EAAE;gBAClE,IAAI,CAAC,WAAW,EAAE,CAAC,UAAU,GAAG,gBAAU,CAAC,OAAO,CAAC;aACtD;SACJ;QACD,IAAI,IAAI,CAAC,uBAAuB,KAAK,KAAK,EAAE;YACxC,IAAI,IAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,QAAQ,EAAE;gBAClE,IAAI,CAAC,WAAW,EAAE,CAAC,UAAU,GAAG,gBAAU,CAAC,OAAO,CAAC;aACtD;SACJ;IACL,CAAC;IAED,KAAK,CAAC,IAAkB;QACpB,OAAO;IACX,CAAC;IAED,QAAQ;QACJ,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;CACJ;AAjCD,oDAiCC","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport { Context, SpanKind, TraceFlags } from \"@opentelemetry/api\";\r\nimport { ReadableSpan, Span, SpanProcessor } from \"@opentelemetry/sdk-trace-base\";\r\n\r\n/**\r\n * Azure Monitor Incoming & Outgoing Request Processor.\r\n * @internal\r\n */\r\nexport class RequestSpanProcessor implements SpanProcessor {\r\n    private _enableDependencyTelemetry: boolean;\r\n    private _enableRequestTelemetry: boolean;\r\n\r\n    constructor(enableDependencyTelemetry: boolean, enableRequestTelemetry: boolean) {\r\n        this._enableDependencyTelemetry = enableDependencyTelemetry;\r\n        this._enableRequestTelemetry = enableRequestTelemetry;\r\n    }\r\n\r\n    forceFlush(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    onStart(span: Span, _context: Context): void {\r\n        if (this._enableDependencyTelemetry === false) {\r\n            if (span.kind === SpanKind.CLIENT || span.kind === SpanKind.PRODUCER) {\r\n                span.spanContext().traceFlags = TraceFlags.SAMPLED;\r\n            }\r\n        }\r\n        if (this._enableRequestTelemetry === false) {\r\n            if (span.kind === SpanKind.SERVER || span.kind === SpanKind.CONSUMER) {\r\n                span.spanContext().traceFlags = TraceFlags.SAMPLED;\r\n            }\r\n        }\r\n    }\r\n\r\n    onEnd(span: ReadableSpan): void {\r\n        return;\r\n    }\r\n\r\n    shutdown(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n}"]}