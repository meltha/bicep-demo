{"version":3,"file":"statsbeatExporter.js","sourceRoot":"","sources":["../../../../src/export/statsbeat/statsbeatExporter.ts"],"names":[],"mappings":";;;AAAA,uCAAuC;AACvC,kCAAkC;AAClC,4CAA6C;AAG7C,8CAAwE;AAGxE,+DAAuE;AACvE,wCAAsD;AACtD,sDAAqD;AAErD;;GAEG;AACH,MAAa,6BACX,SAAQ,kCAAwB;IAGhC;;OAEG;IACK,WAAW,GAAG,KAAK,CAAC;IACpB,OAAO,CAAa;IAE5B;;;OAGG;IACH,YAAY,OAAoC;QAC9C,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,IAAI,qBAAU,CAAC;YAC5B,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;YAC3C,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,eAAe,EAAE,OAAO;YACxB,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACK,sBAAsB,CAAC,SAAqB;QAClD,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE;YACnC,qCAAqC;YACrC,IAAI,QAAQ,CAAC,IAAI,EAAE,QAAQ,KAAK,YAAY,IAAI,QAAQ,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC;gBACjF,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAC/C,+CAA+C;gBAC/C,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;YAC3D,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM,CACV,OAAwB,EACxB,cAA8C;QAE9C,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,UAAU,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,uBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACvE,OAAO;QACT,CAAC;QAED,MAAM,SAAS,GAAe,IAAA,0CAAyB,EACrD,OAAO,EACP,IAAI,CAAC,kBAAkB,EACvB,IAAI,CACL,CAAC;QAEF,8CAA8C;QAC9C,MAAM,iBAAiB,GAAG,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;QAEjE,6DAA6D;QAC7D,aAAO,CAAC,IAAI,CAAC,IAAA,sBAAe,EAAC,aAAO,CAAC,MAAM,EAAE,CAAC,EAAE,KAAK,IAAI,EAAE;YACzD,cAAc,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IACjC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,UAAU;QACrB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AApFD,sEAoFC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { context } from \"@opentelemetry/api\";\nimport type { PushMetricExporter, ResourceMetrics } from \"@opentelemetry/sdk-metrics\";\nimport type { ExportResult } from \"@opentelemetry/core\";\nimport { ExportResultCode, suppressTracing } from \"@opentelemetry/core\";\nimport type { AzureMonitorExporterOptions } from \"../../config.js\";\nimport type { TelemetryItem as Envelope } from \"../../generated/index.js\";\nimport { resourceMetricsToEnvelope } from \"../../utils/metricUtils.js\";\nimport { AzureMonitorBaseExporter } from \"../base.js\";\nimport { HttpSender } from \"../../platform/index.js\";\n\n/**\n * Azure Monitor Statsbeat Exporter\n */\nexport class AzureMonitorStatsbeatExporter\n  extends AzureMonitorBaseExporter\n  implements PushMetricExporter\n{\n  /**\n   * Flag to determine if the Exporter is shutdown.\n   */\n  private _isShutdown = false;\n  private _sender: HttpSender;\n\n  /**\n   * Initializes a new instance of the AzureMonitorStatsbeatExporter class.\n   * @param options - Exporter configuration\n   */\n  constructor(options: AzureMonitorExporterOptions) {\n    super(options, true);\n    this._sender = new HttpSender({\n      endpointUrl: this.endpointUrl,\n      instrumentationKey: this.instrumentationKey,\n      trackStatsbeat: this.trackStatsbeat,\n      exporterOptions: options,\n      isStatsbeatSender: true,\n    });\n  }\n\n  /**\n   * Filter out envelopes with zero metric values to prevent exporting zero counts.\n   * This ensures zero counts are observed for internal cleanup but not exported to Azure Monitor.\n   * @param envelopes - Array of telemetry envelopes to filter\n   * @returns Filtered array of envelopes with non-zero metric values\n   */\n  private filterZeroValueMetrics(envelopes: Envelope[]): Envelope[] {\n    return envelopes.filter((envelope) => {\n      // Check if this is a metric envelope\n      if (envelope.data?.baseType === \"MetricData\" && envelope.data?.baseData?.metrics) {\n        const metrics = envelope.data.baseData.metrics;\n        // Filter out metrics where all values are zero\n        return metrics.some((metric: any) => metric.value !== 0);\n      }\n      return true;\n    });\n  }\n\n  /**\n   * Export Statsbeat metrics.\n   */\n  async export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void,\n  ): Promise<void> {\n    if (this._isShutdown) {\n      setTimeout(() => resultCallback({ code: ExportResultCode.FAILED }), 0);\n      return;\n    }\n\n    const envelopes: Envelope[] = resourceMetricsToEnvelope(\n      metrics,\n      this.instrumentationKey,\n      true, // isStatsbeat flag passed to create a Statsbeat envelope.\n    );\n\n    // Filter out zero-value metrics before export\n    const filteredEnvelopes = this.filterZeroValueMetrics(envelopes);\n\n    // Supress tracing until OpenTelemetry Metrics SDK support it\n    context.with(suppressTracing(context.active()), async () => {\n      resultCallback(await this._sender.exportEnvelopes(filteredEnvelopes));\n    });\n  }\n\n  /**\n   * Shutdown AzureMonitorStatsbeatExporter.\n   */\n  public async shutdown(): Promise<void> {\n    this._isShutdown = true;\n    return this._sender.shutdown();\n  }\n\n  /**\n   * Force flush.\n   */\n  public async forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n"]}