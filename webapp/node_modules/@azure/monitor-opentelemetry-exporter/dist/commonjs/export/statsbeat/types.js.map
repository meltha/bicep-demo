{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/export/statsbeat/types.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Statsbeat class for network telemetry.\n * @internal\n */\nexport class NetworkStatsbeat {\n  public time: number | undefined;\n\n  public lastTime: number;\n\n  public endpoint: string;\n\n  public host: string;\n\n  public totalRequestCount: number;\n\n  public lastRequestCount: number;\n\n  public totalSuccessfulRequestCount: number;\n\n  public totalReadFailureCount: number;\n\n  public totalWriteFailureCount: number;\n\n  public totalFailedRequestCount: { statusCode: number; count: number }[];\n\n  public retryCount: { statusCode: number; count: number }[];\n\n  public exceptionCount: { exceptionType: string; count: number }[];\n\n  public throttleCount: { statusCode: number; count: number }[];\n\n  public intervalRequestExecutionTime: number;\n\n  public lastIntervalRequestExecutionTime: number;\n\n  public averageRequestExecutionTime: number;\n\n  constructor(endpoint: string, host: string) {\n    this.endpoint = endpoint;\n    this.host = host;\n    this.totalRequestCount = 0;\n    this.totalSuccessfulRequestCount = 0;\n    this.totalReadFailureCount = 0;\n    this.totalWriteFailureCount = 0;\n    this.totalFailedRequestCount = [];\n    this.retryCount = [];\n    this.exceptionCount = [];\n    this.throttleCount = [];\n    this.intervalRequestExecutionTime = 0;\n    this.lastIntervalRequestExecutionTime = 0;\n    this.lastTime = +new Date();\n    this.lastRequestCount = 0;\n    this.averageRequestExecutionTime = 0;\n  }\n}\n\n/**\n * SDK Stats class for customer-visible telemetry.\n * @internal\n */\nexport class CustomerSDKStats {\n  public totalItemSuccessCount: Map<TelemetryType, number>;\n\n  // telemetry_type -> drop.code -> drop.reason -> success -> count\n  // success can be true/false for request/dependency telemetry, or null for other types\n  public totalItemDropCount: Map<\n    TelemetryType,\n    Map<DropCode | number, Map<string, Map<boolean | null, number>>>\n  >;\n\n  // Nested Map structure: telemetry_type -> retry.code -> retry.reason -> count\n  public totalItemRetryCount: Map<TelemetryType, Map<RetryCode | number, Map<string, number>>>;\n\n  constructor() {\n    this.totalItemSuccessCount = new Map<TelemetryType, number>();\n    this.totalItemDropCount = new Map<\n      TelemetryType,\n      Map<DropCode | number, Map<string, Map<boolean | null, number>>>\n    >();\n    this.totalItemRetryCount = new Map<\n      TelemetryType,\n      Map<RetryCode | number, Map<string, number>>\n    >();\n  }\n}\n\n// Legacy alias for backward compatibility\nexport const CustomerStatsbeat = CustomerSDKStats;\n\nexport const STATSBEAT_LANGUAGE = \"node\";\n\nexport const AZURE_MONITOR_AUTO_ATTACH = \"AZURE_MONITOR_AUTO_ATTACH\";\n\nexport const MAX_STATSBEAT_FAILURES = 3;\n\nexport const StatsbeatResourceProvider = {\n  appsvc: \"appsvc\",\n  aks: \"aks\",\n  functions: \"functions\",\n  vm: \"vm\",\n  unknown: \"unknown\",\n};\n\nexport enum AttachTypeName {\n  INTEGRATED_AUTO = \"IntegratedAuto\",\n  MANUAL = \"Manual\",\n}\n\nexport enum StatsbeatCounter {\n  SUCCESS_COUNT = \"Request_Success_Count\",\n  FAILURE_COUNT = \"Request_Failure_Count\",\n  RETRY_COUNT = \"Retry_Count\",\n  THROTTLE_COUNT = \"Throttle_Count\",\n  EXCEPTION_COUNT = \"Exception_Count\",\n  AVERAGE_DURATION = \"Request_Duration\",\n  READ_FAILURE_COUNT = \"Read_Failure_Count\",\n  WRITE_FAILURE_COUNT = \"Write_Failure_Count\",\n  ATTACH = \"Attach\",\n  FEATURE = \"Feature\",\n}\n\nexport enum CustomSDKStatsCounter {\n  ITEM_SUCCESS_COUNT = \"preview.item.success.count\",\n  ITEM_DROP_COUNT = \"preview.item.dropped.count\",\n  ITEM_RETRY_COUNT = \"preview.item.retry.count\",\n}\n\n// Legacy alias for backward compatibility\nexport const CustomStatsbeatCounter = CustomSDKStatsCounter;\n\nexport const AIMS_URI = \"http://169.254.169.254/metadata/instance/compute\";\nexport const AIMS_API_VERSION = \"api-version=2017-12-01\";\nexport const AIMS_FORMAT = \"format=json\";\nexport const NON_EU_CONNECTION_STRING =\n  \"InstrumentationKey=c4a29126-a7cb-47e5-b348-11414998b11e;IngestionEndpoint=https://westus-0.in.applicationinsights.azure.com\";\nexport const EU_CONNECTION_STRING =\n  \"InstrumentationKey=7dc56bab-3c0c-4e9f-9ebb-d1acadee8d0f;IngestionEndpoint=https://westeurope-5.in.applicationinsights.azure.com\";\nexport const EU_ENDPOINTS = [\n  \"westeurope\",\n  \"northeurope\",\n  \"francecentral\",\n  \"francesouth\",\n  \"germanywestcentral\",\n  \"norwayeast\",\n  \"norwaywest\",\n  \"swedencentral\",\n  \"switzerlandnorth\",\n  \"switzerlandwest\",\n  \"uksouth\",\n  \"ukwest\",\n];\n\nexport interface CommonStatsbeatProperties {\n  os: string;\n  rp: string;\n  cikey: string;\n  runtimeVersion: string;\n  language: string;\n  version: string;\n  attach: string;\n}\n\nexport interface CustomerSDKStatsProperties {\n  language: string;\n  version: string;\n  computeType: string;\n}\n\n// Legacy alias for backward compatibility\nexport type CustomerStatsbeatProperties = CustomerSDKStatsProperties;\n\nexport enum TelemetryType {\n  AVAILABILITY = \"AVAILABILITY\",\n  CUSTOM_EVENT = \"CUSTOM_EVENT\",\n  CUSTOM_METRIC = \"CUSTOM_METRIC\",\n  DEPENDENCY = \"DEPENDENCY\",\n  EXCEPTION = \"EXCEPTION\",\n  PAGE_VIEW = \"PAGE_VIEW\",\n  PERFORMANCE_COUNTER = \"PERFORMANCE_COUNTER\",\n  REQUEST = \"REQUEST\",\n  TRACE = \"TRACE\",\n  UNKNOWN = \"UNKNOWN\",\n}\n\nexport enum DropCode {\n  CLIENT_EXCEPTION = \"CLIENT_EXCEPTION\",\n  CLIENT_READONLY = \"CLIENT_READONLY\",\n  CLIENT_PERSISTENCE_CAPACITY = \"CLIENT_PERSISTENCE_CAPACITY\",\n  CLIENT_STORAGE_DISABLED = \"CLIENT_STORAGE_DISABLED\",\n  UNKNOWN = \"UNKNOWN\",\n}\n\nexport enum RetryCode {\n  CLIENT_EXCEPTION = \"CLIENT_EXCEPTION\",\n  CLIENT_TIMEOUT = \"CLIENT_TIMEOUT\",\n  UNKNOWN = \"UNKNOWN\",\n}\n\nexport interface AttachStatsbeatProperties {\n  rpId: string;\n}\n\nexport interface NetworkStatsbeatProperties {\n  endpoint: string;\n  host: string;\n}\n\nexport interface StatsbeatOptions {\n  instrumentationKey: string;\n  endpointUrl: string;\n  networkCollectionInterval?: number;\n  longCollectionInterval?: number;\n  disableOfflineStorage?: boolean;\n}\n\nexport interface VirtualMachineInfo {\n  isVM?: boolean;\n  id?: string;\n  subscriptionId?: string;\n  osType?: string;\n}\n\nexport enum StatsbeatFeatureType {\n  FEATURE = 0,\n  INSTRUMENTATION = 1,\n}\n\n/**\n * Exception types for client exceptions\n * @internal\n */\nexport enum ExceptionType {\n  CLIENT_EXCEPTION = \"Client exception\",\n  NETWORK_EXCEPTION = \"Network exception\",\n  STORAGE_EXCEPTION = \"Storage exception\",\n  TIMEOUT_EXCEPTION = \"Timeout exception\",\n}\n\n/**\n * Reasons for dropping telemetry\n */\nexport enum DropReason {\n  CLIENT_READONLY = \"Client readonly\",\n  CLIENT_PERSISTENCE_CAPACITY = \"Client persistence capacity\",\n  CLIENT_STORAGE_DISABLED = \"Client local storage disabled\",\n  UNKNOWN = \"Unknown reason\",\n}\n\n/**\n * Reasons for retrying telemetry\n */\nexport enum RetryReason {\n  CLIENT_TIMEOUT = \"Client timeout\",\n  UNKNOWN = \"Unknown reason\",\n}\n\n/**\n * Status codes indicating that we should shutdown statsbeat\n * @internal\n */\nexport function isStatsbeatShutdownStatus(statusCode: number): boolean {\n  return (\n    statusCode === 401 || // Unauthorized\n    statusCode === 403 || // Forbidden\n    statusCode === 503 // Server Unavailable\n  );\n}\n"]}