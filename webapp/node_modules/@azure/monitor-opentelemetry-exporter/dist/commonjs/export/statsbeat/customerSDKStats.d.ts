import { StatsbeatMetrics } from "./statsbeatMetrics.js";
import type { StatsbeatOptions } from "./types.js";
import { DropCode, RetryCode, ExceptionType } from "./types.js";
import { TelemetryType } from "./types.js";
import type { TelemetryItem as Envelope } from "../../generated/index.js";
/**
 * Class that handles customer-facing SDK Stats metrics
 * These metrics are sent to the customer's breeze endpoint
 *
 * Implements a singleton pattern to ensure only one set of customer SDK Stats metrics
 * is exported every 15 minutes, regardless of the number of exporters or senders.
 */
export declare class CustomerSDKStatsMetrics extends StatsbeatMetrics {
    private static _instance;
    private statsCollectionInterval;
    private customerSDKStatsMeter;
    private customerSDKStatsMeterProvider;
    private customerSDKStatsExporter;
    private customerSDKStatsCounter;
    private customerSDKStatsMetricReader;
    private isInitialized;
    private language;
    private version;
    private attach;
    private itemSuccessCountGauge;
    private itemDropCountGauge;
    private itemRetryCountGauge;
    private customerProperties;
    private constructor();
    /**
     * Get singleton instance of CustomerSDKStatsMetrics
     * @param options - Configuration options for customer SDK Stats metrics
     * @returns The singleton instance
     */
    static getInstance(options: StatsbeatOptions): CustomerSDKStatsMetrics;
    /**
     * Shutdown the singleton instance
     * Used for cleanup and complete shutdown
     */
    static shutdown(): Promise<void> | undefined;
    /**
     * Shuts down the customer SDK Stats metrics provider
     * @returns Promise<void>
     */
    shutdown(): Promise<void>;
    /**
     * Initializes the customer SDK Stats metrics
     * Sets up the resource provider and adds observable callbacks for each metric
     * @returns Promise<void>
     */
    private initialize;
    private itemSuccessCallback;
    private itemDropCallback;
    private itemRetryCallback;
    /**
     * Tracks succcessful items
     * @param envelopes - Number of successful envelopes
     * @param telemetry_type - The type of telemetry being tracked
     */
    countSuccessfulItems(envelopes: Envelope[]): void;
    /**
     * Tracks dropped items
     * @param envelopes - Array of envelopes dropped
     * @param dropCode - The drop code indicating the reason for drop
     * @param exceptionMessage - Optional exception message when dropCode is CLIENT_EXCEPTION
     * @param exceptionType - Optional explicit exception type override when dropCode is CLIENT_EXCEPTION
     */
    countDroppedItems(envelopes: Envelope[], dropCode: DropCode | number, exceptionMessage?: string, exceptionType?: ExceptionType): void;
    /**
     * Generates a low-cardinality, informative description for drop reasons
     * @param dropCode - The drop code (enum value or status code number)
     * @param exceptionMessage - Optional exception message for CLIENT_EXCEPTION
     * @param exceptionType - Optional explicit exception type override for CLIENT_EXCEPTION
     * @returns A descriptive reason string with low cardinality
     */
    private getDropReason;
    /**
     * Categorizes exception messages into well-known exception categories
     * @param exceptionMessage - The exception message to categorize
     * @returns A well-known exception category string
     */
    private categorizeExceptionMessage;
    /**
     * Categorizes HTTP status codes into informative descriptions
     * @param statusCode - The HTTP status code
     * @returns A descriptive category string
     */
    private categorizeStatusCode;
    /**
     * Tracks retried envelopes
     * @param envelopes - Number of envelopes retried
     * @param retryCode - The retry code indicating the reason for retry
     * @param exceptionMessage - Optional exception message when retryCode is CLIENT_EXCEPTION
     * @param exceptionType - Optional explicit exception type override when retryCode is CLIENT_EXCEPTION
     */
    countRetryItems(envelopes: Envelope[], retryCode: RetryCode | number, exceptionMessage?: string, exceptionType?: ExceptionType): void;
    /**
     * Generates a low-cardinality, informative description for retry reasons
     * @param retryCode - The retry code (enum value or status code number)
     * @param exceptionMessage - Optional exception message for CLIENT_EXCEPTION
     * @param exceptionType - Optional explicit exception type override for CLIENT_EXCEPTION
     * @returns A descriptive reason string with low cardinality
     */
    private getRetryReason;
    /**
     * Check if a metric name corresponds to a performance counter
     * @param metricName - The name of the metric to check
     * @returns true if the metric name is a performance counter, false otherwise
     */
    private isPerformanceCounterMetric;
    /**
     * Extract telemetry type from an envelope based on its baseType
     * @param envelope - The envelope to extract telemetry type from
     * @returns The corresponding telemetry type
     */
    getTelemetryTypeFromEnvelope(envelope: Envelope): TelemetryType;
    /**
     * Extract telemetry success value from an envelope for REQUEST and DEPENDENCY telemetry types
     * @param envelope - The envelope to extract success value from
     * @returns The success value if available, undefined otherwise
     */
    getTelemetrySuccessFromEnvelope(envelope: Envelope): boolean | undefined;
    /**
     * Checks if the given error is a timeout-related error
     * @param error - The error to check
     * @returns true if the error is timeout-related, false otherwise
     */
    isTimeoutError(error: {
        code?: string;
        message?: string;
    }): boolean;
}
//# sourceMappingURL=customerSDKStats.d.ts.map