{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../../../src/platform/nodejs/context/context.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AA8DlC,kCAKC;;AAjED,8CAA+C;AAC/C,8EAAiF;AACjF,0DAAkE;AAClE,4FAAsE;AAEtE,qEAI4C;AAE5C,IAAI,QAAQ,GAAmB,IAAI,CAAC;AAEpC;;;GAGG;AACH,MAAa,OAAO;IACX,IAAI,CAAO;IAEX,MAAM,CAAC,UAAU,GAAkB,IAAI,CAAC;IAExC,MAAM,CAAC,oBAAoB,GAAkB,IAAI,CAAC;IAElD,MAAM,CAAC,WAAW,GAAW,EAAE,CAAC;IAEvC;QACE,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAEO,oBAAoB;QAC1B,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC;QAClC,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACxC,OAAO,CAAC,oBAAoB,GAAG,eAAQ,CAAC,iDAA0B,CAAC,CAAC;QACpE,OAAO,CAAC,UAAU,GAAG,EAAE,CAAC,cAAc,CAAC;QAEvC,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,uCAAwB,CAAC;YAClD,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,uCAAwB,CAAC;YACvC,CAAC,CAAC,EAAE,CAAC;QACP,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QACnC,MAAM,kBAAkB,GAAG,GAAG,MAAM,OAAO,OAAO,CAAC,WAAW,QAAQ,OAAO,CAAC,oBAAoB,IAAI,OAAO,EAAE,CAAC;QAChH,IAAI,CAAC,IAAI,CAAC,8BAAmB,CAAC,oBAAoB,CAAC,GAAG,kBAAkB,CAAC;IAC3E,CAAC;IAEO,WAAW;QACjB,IAAI,OAAO,CAAC,GAAG,CAAC,mDAAoC,CAAC,EAAE,CAAC;YACtD,OAAO,MAAM,OAAO,CAAC,GAAG,CAAC,mDAAoC,CAAC,EAAE,CAAC;QACnE,CAAC;aAAM,IAAI,OAAO,CAAC,GAAG,CAAC,+CAAgC,CAAC,EAAE,CAAC;YACzD,OAAO,MAAM,OAAO,CAAC,GAAG,CAAC,+CAAgC,CAAC,EAAE,CAAC;QAC/D,CAAC;aAAM,CAAC;YACN,OAAO,MAAM,OAAO,CAAC,UAAU,EAAE,CAAC;QACpC,CAAC;IACH,CAAC;;AApCH,0BAqCC;AAED;;;GAGG;AACH,SAAgB,WAAW;IACzB,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,QAAQ,GAAG,IAAI,OAAO,EAAE,CAAC;IAC3B,CAAC;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { SDK_INFO } from \"@opentelemetry/core\";\nimport { ATTR_TELEMETRY_SDK_VERSION } from \"@opentelemetry/semantic-conventions\";\nimport { KnownContextTagKeys } from \"../../../generated/index.js\";\nimport * as ai from \"../../../utils/constants/applicationinsights.js\";\nimport type { Tags } from \"../../../types.js\";\nimport {\n  ENV_AZURE_MONITOR_PREFIX,\n  ENV_APPLICATIONINSIGHTS_SHIM_VERSION,\n  ENV_AZURE_MONITOR_DISTRO_VERSION,\n} from \"../../../Declarations/Constants.js\";\n\nlet instance: Context | null = null;\n\n/**\n * Azure Telemetry context.\n * @internal\n */\nexport class Context {\n  public tags: Tags;\n\n  public static sdkVersion: string | null = null;\n\n  public static opentelemetryVersion: string | null = null;\n\n  public static nodeVersion: string = \"\";\n\n  constructor() {\n    this.tags = {};\n    this._loadInternalContext();\n  }\n\n  private _loadInternalContext(): void {\n    const { node } = process.versions;\n    [Context.nodeVersion] = node.split(\".\");\n    Context.opentelemetryVersion = SDK_INFO[ATTR_TELEMETRY_SDK_VERSION];\n    Context.sdkVersion = ai.packageVersion;\n\n    const prefix = process.env[ENV_AZURE_MONITOR_PREFIX]\n      ? process.env[ENV_AZURE_MONITOR_PREFIX]\n      : \"\";\n    const version = this._getVersion();\n    const internalSdkVersion = `${prefix}node${Context.nodeVersion}:otel${Context.opentelemetryVersion}:${version}`;\n    this.tags[KnownContextTagKeys.AiInternalSdkVersion] = internalSdkVersion;\n  }\n\n  private _getVersion(): string {\n    if (process.env[ENV_APPLICATIONINSIGHTS_SHIM_VERSION]) {\n      return `sha${process.env[ENV_APPLICATIONINSIGHTS_SHIM_VERSION]}`;\n    } else if (process.env[ENV_AZURE_MONITOR_DISTRO_VERSION]) {\n      return `dst${process.env[ENV_AZURE_MONITOR_DISTRO_VERSION]}`;\n    } else {\n      return `ext${Context.sdkVersion}`;\n    }\n  }\n}\n\n/**\n * Singleton Context instance\n * @internal\n */\nexport function getInstance(): Context {\n  if (!instance) {\n    instance = new Context();\n  }\n  return instance;\n}\n"]}