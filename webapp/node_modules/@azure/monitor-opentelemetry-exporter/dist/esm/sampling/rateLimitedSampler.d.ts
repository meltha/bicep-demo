import type { Link, Attributes, SpanKind, Context } from "@opentelemetry/api";
import type { Sampler, SamplingResult } from "@opentelemetry/sdk-trace-base";
/**
 * RateLimitedSampler is responsible for the following:
 * - Implements a rate-limiting sampling strategy based on a specified number of requests per second.
 * - Dynamically adjusts the sampling rate based on the time elapsed since the last sample.
 * - Provides a sampling rate that can be used to determine whether a span should be recorded.
 * @param requestsPerSecond -
 */
export declare class RateLimitedSampler implements Sampler {
    private readonly nanoTimeSupplier;
    private readonly inverseAdaptationTimeNanos;
    private readonly targetSpansPerNanosecondLimit;
    private state;
    private readonly roundToNearest;
    private readonly tracesPerSecond;
    /**
     * Initializes a new instance of the RateLimitedSampler class.
     * @param tracesPerSecond - The maximum number of traces to sample per second.
     * @throws Error if tracesPerSecond is negative.
     */
    constructor(tracesPerSecond: number);
    /**
     * Updates the state of the sampler based on the current time.
     * This method calculates the effective window count and nanos based on the time elapsed since the last sample.
     * @param oldState - The previous state of the sampler.
     * @param currentNanoTime - The current time in nanoseconds.
     * @returns The updated state of the sampler.
     */
    private updateState;
    /**
     * Gets the current sample rate based on the effective window count and nanos.
     * This method calculates the sampling probability and returns it as a percentage.
     * If `roundToNearest` is true, it rounds down the sampling percentage to the nearest whole number.
     * @returns The current sample rate as a percentage.
     */
    getSampleRate(): number;
    /**
     * Checks whether span needs to be created and tracked.
     *
     * @param context - Parent Context which may contain a span.
     * @param traceId - traceId of the span to be created. It can be different from the
     *     traceId in the {@link SpanContext}. Typically in situations when the
     *     span to be created starts a new trace.
     * @param spanName - Name of the span to be created.
     * @param spanKind - Kind of the span to be created.
     * @param attributes - Initial set of SpanAttributes for the Span being constructed.
     * @param links - Collection of links that will be associated with the Span to
     *     be created. Typically useful for batch operations.
     * @returns a {@link SamplingResult}.
     */
    shouldSample(context: Context, traceId: string, spanName: string, spanKind: SpanKind, attributes: Attributes, links: Link[]): SamplingResult;
    /**
     * Return Sampler description
     */
    toString(): string;
}
//# sourceMappingURL=rateLimitedSampler.d.ts.map