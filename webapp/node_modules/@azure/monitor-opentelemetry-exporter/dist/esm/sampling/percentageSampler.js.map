{"version":3,"file":"percentageSampler.js","sourceRoot":"","sources":["../../../src/sampling/percentageSampler.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,gBAAgB,EAAE,MAAM,+BAA+B,CAAC;AACjE,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAElD;;;;;GAKG;AACH,MAAM,OAAO,0BAA0B;IAC7B,WAAW,CAAS;IACX,aAAa,CAAS;IAEvC;;;OAGG;IACH,YAAY,gBAAwB,CAAC;QACnC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;YAC7F,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;QACvE,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;;;;;;;;;OAaG;IACI,YAAY,CACjB,OAAgB,EAChB,OAAe;IACf,mCAAmC;IACnC,QAAgB;IAChB,mCAAmC;IACnC,QAAkB,EAClB,UAAsB;IACtB,mCAAmC;IACnC,KAAa;QAEb,OAAO,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC;YACjE,CAAC,CAAC,EAAE,QAAQ,EAAE,gBAAgB,CAAC,kBAAkB,EAAE,UAAU,EAAE,UAAU,EAAE;YAC3E,CAAC,CAAC,EAAE,QAAQ,EAAE,gBAAgB,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;IACxE,CAAC;IAED;;OAEG;IACI,QAAQ;QACb,OAAO,8BAA8B,IAAI,CAAC,aAAa,GAAG,CAAC;IAC7D,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Link, Attributes, SpanKind, Context } from \"@opentelemetry/api\";\nimport type { Sampler, SamplingResult } from \"@opentelemetry/sdk-trace-base\";\nimport { SamplingDecision } from \"@opentelemetry/sdk-trace-base\";\nimport { shouldSample } from \"./samplingUtils.js\";\n\n/**\n * ApplicationInsightsSampler is responsible for the following:\n * Implements same trace id hashing algorithm so that traces are sampled the same across multiple nodes\n * Adds item count to span attribute if span is sampled (needed for ingestion service)\n * @param samplingRatio - 0 to 1 value.\n */\nexport class ApplicationInsightsSampler implements Sampler {\n  private _sampleRate: number;\n  private readonly samplingRatio: number;\n\n  /**\n   * Initializes a new instance of the ApplicationInsightsSampler class.\n   * @param samplingRatio - Value in the range [0,1], 1 meaning all data will sampled and 0 all Tracing data will be sampled out.\n   */\n  constructor(samplingRatio: number = 1) {\n    this.samplingRatio = samplingRatio;\n    if (this.samplingRatio > 1 || this.samplingRatio < 0 || !Number.isFinite(this.samplingRatio)) {\n      throw new Error(\"Wrong sampling rate, data will not be sampled out\");\n    }\n    this._sampleRate = Math.round(this.samplingRatio * 100);\n  }\n\n  /**\n   * Checks whether span needs to be created and tracked.\n   *\n   * @param context - Parent Context which may contain a span.\n   * @param traceId - traceif of the span to be created. It can be different from the\n   *     traceId in the {@link SpanContext}. Typically in situations when the\n   *     span to be created starts a new trace.\n   * @param spanName - Name of the span to be created.\n   * @param spanKind - Kind of the span to be created.\n   * @param attributes - Initial set of SpanAttributes for the Span being constructed.\n   * @param links - Collection of links that will be associated with the Span to\n   *     be created. Typically useful for batch operations.\n   * @returns a {@link SamplingResult}.\n   */\n  public shouldSample(\n    context: Context,\n    traceId: string,\n    // @ts-expect-error unused argument\n    spanName: string,\n    // @ts-expect-error unused argument\n    spanKind: SpanKind,\n    attributes: Attributes,\n    // @ts-expect-error unused argument\n    links: Link[],\n  ): SamplingResult {\n    return shouldSample(this._sampleRate, context, traceId, attributes)\n      ? { decision: SamplingDecision.RECORD_AND_SAMPLED, attributes: attributes }\n      : { decision: SamplingDecision.NOT_RECORD, attributes: attributes };\n  }\n\n  /**\n   * Return Sampler description\n   */\n  public toString(): string {\n    return `ApplicationInsightsSampler{${this.samplingRatio}}`;\n  }\n}\n"]}