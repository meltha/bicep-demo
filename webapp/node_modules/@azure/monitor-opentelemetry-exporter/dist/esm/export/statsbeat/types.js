// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * Statsbeat class for network telemetry.
 * @internal
 */
export class NetworkStatsbeat {
    time;
    lastTime;
    endpoint;
    host;
    totalRequestCount;
    lastRequestCount;
    totalSuccessfulRequestCount;
    totalReadFailureCount;
    totalWriteFailureCount;
    totalFailedRequestCount;
    retryCount;
    exceptionCount;
    throttleCount;
    intervalRequestExecutionTime;
    lastIntervalRequestExecutionTime;
    averageRequestExecutionTime;
    constructor(endpoint, host) {
        this.endpoint = endpoint;
        this.host = host;
        this.totalRequestCount = 0;
        this.totalSuccessfulRequestCount = 0;
        this.totalReadFailureCount = 0;
        this.totalWriteFailureCount = 0;
        this.totalFailedRequestCount = [];
        this.retryCount = [];
        this.exceptionCount = [];
        this.throttleCount = [];
        this.intervalRequestExecutionTime = 0;
        this.lastIntervalRequestExecutionTime = 0;
        this.lastTime = +new Date();
        this.lastRequestCount = 0;
        this.averageRequestExecutionTime = 0;
    }
}
/**
 * SDK Stats class for customer-visible telemetry.
 * @internal
 */
export class CustomerSDKStats {
    totalItemSuccessCount;
    // telemetry_type -> drop.code -> drop.reason -> success -> count
    // success can be true/false for request/dependency telemetry, or null for other types
    totalItemDropCount;
    // Nested Map structure: telemetry_type -> retry.code -> retry.reason -> count
    totalItemRetryCount;
    constructor() {
        this.totalItemSuccessCount = new Map();
        this.totalItemDropCount = new Map();
        this.totalItemRetryCount = new Map();
    }
}
// Legacy alias for backward compatibility
export const CustomerStatsbeat = CustomerSDKStats;
export const STATSBEAT_LANGUAGE = "node";
export const AZURE_MONITOR_AUTO_ATTACH = "AZURE_MONITOR_AUTO_ATTACH";
export const MAX_STATSBEAT_FAILURES = 3;
export const StatsbeatResourceProvider = {
    appsvc: "appsvc",
    aks: "aks",
    functions: "functions",
    vm: "vm",
    unknown: "unknown",
};
export var AttachTypeName;
(function (AttachTypeName) {
    AttachTypeName["INTEGRATED_AUTO"] = "IntegratedAuto";
    AttachTypeName["MANUAL"] = "Manual";
})(AttachTypeName || (AttachTypeName = {}));
export var StatsbeatCounter;
(function (StatsbeatCounter) {
    StatsbeatCounter["SUCCESS_COUNT"] = "Request_Success_Count";
    StatsbeatCounter["FAILURE_COUNT"] = "Request_Failure_Count";
    StatsbeatCounter["RETRY_COUNT"] = "Retry_Count";
    StatsbeatCounter["THROTTLE_COUNT"] = "Throttle_Count";
    StatsbeatCounter["EXCEPTION_COUNT"] = "Exception_Count";
    StatsbeatCounter["AVERAGE_DURATION"] = "Request_Duration";
    StatsbeatCounter["READ_FAILURE_COUNT"] = "Read_Failure_Count";
    StatsbeatCounter["WRITE_FAILURE_COUNT"] = "Write_Failure_Count";
    StatsbeatCounter["ATTACH"] = "Attach";
    StatsbeatCounter["FEATURE"] = "Feature";
})(StatsbeatCounter || (StatsbeatCounter = {}));
export var CustomSDKStatsCounter;
(function (CustomSDKStatsCounter) {
    CustomSDKStatsCounter["ITEM_SUCCESS_COUNT"] = "preview.item.success.count";
    CustomSDKStatsCounter["ITEM_DROP_COUNT"] = "preview.item.dropped.count";
    CustomSDKStatsCounter["ITEM_RETRY_COUNT"] = "preview.item.retry.count";
})(CustomSDKStatsCounter || (CustomSDKStatsCounter = {}));
// Legacy alias for backward compatibility
export const CustomStatsbeatCounter = CustomSDKStatsCounter;
export const AIMS_URI = "http://169.254.169.254/metadata/instance/compute";
export const AIMS_API_VERSION = "api-version=2017-12-01";
export const AIMS_FORMAT = "format=json";
export const NON_EU_CONNECTION_STRING = "InstrumentationKey=c4a29126-a7cb-47e5-b348-11414998b11e;IngestionEndpoint=https://westus-0.in.applicationinsights.azure.com";
export const EU_CONNECTION_STRING = "InstrumentationKey=7dc56bab-3c0c-4e9f-9ebb-d1acadee8d0f;IngestionEndpoint=https://westeurope-5.in.applicationinsights.azure.com";
export const EU_ENDPOINTS = [
    "westeurope",
    "northeurope",
    "francecentral",
    "francesouth",
    "germanywestcentral",
    "norwayeast",
    "norwaywest",
    "swedencentral",
    "switzerlandnorth",
    "switzerlandwest",
    "uksouth",
    "ukwest",
];
export var TelemetryType;
(function (TelemetryType) {
    TelemetryType["AVAILABILITY"] = "AVAILABILITY";
    TelemetryType["CUSTOM_EVENT"] = "CUSTOM_EVENT";
    TelemetryType["CUSTOM_METRIC"] = "CUSTOM_METRIC";
    TelemetryType["DEPENDENCY"] = "DEPENDENCY";
    TelemetryType["EXCEPTION"] = "EXCEPTION";
    TelemetryType["PAGE_VIEW"] = "PAGE_VIEW";
    TelemetryType["PERFORMANCE_COUNTER"] = "PERFORMANCE_COUNTER";
    TelemetryType["REQUEST"] = "REQUEST";
    TelemetryType["TRACE"] = "TRACE";
    TelemetryType["UNKNOWN"] = "UNKNOWN";
})(TelemetryType || (TelemetryType = {}));
export var DropCode;
(function (DropCode) {
    DropCode["CLIENT_EXCEPTION"] = "CLIENT_EXCEPTION";
    DropCode["CLIENT_READONLY"] = "CLIENT_READONLY";
    DropCode["CLIENT_PERSISTENCE_CAPACITY"] = "CLIENT_PERSISTENCE_CAPACITY";
    DropCode["CLIENT_STORAGE_DISABLED"] = "CLIENT_STORAGE_DISABLED";
    DropCode["UNKNOWN"] = "UNKNOWN";
})(DropCode || (DropCode = {}));
export var RetryCode;
(function (RetryCode) {
    RetryCode["CLIENT_EXCEPTION"] = "CLIENT_EXCEPTION";
    RetryCode["CLIENT_TIMEOUT"] = "CLIENT_TIMEOUT";
    RetryCode["UNKNOWN"] = "UNKNOWN";
})(RetryCode || (RetryCode = {}));
export var StatsbeatFeatureType;
(function (StatsbeatFeatureType) {
    StatsbeatFeatureType[StatsbeatFeatureType["FEATURE"] = 0] = "FEATURE";
    StatsbeatFeatureType[StatsbeatFeatureType["INSTRUMENTATION"] = 1] = "INSTRUMENTATION";
})(StatsbeatFeatureType || (StatsbeatFeatureType = {}));
/**
 * Exception types for client exceptions
 * @internal
 */
export var ExceptionType;
(function (ExceptionType) {
    ExceptionType["CLIENT_EXCEPTION"] = "Client exception";
    ExceptionType["NETWORK_EXCEPTION"] = "Network exception";
    ExceptionType["STORAGE_EXCEPTION"] = "Storage exception";
    ExceptionType["TIMEOUT_EXCEPTION"] = "Timeout exception";
})(ExceptionType || (ExceptionType = {}));
/**
 * Reasons for dropping telemetry
 */
export var DropReason;
(function (DropReason) {
    DropReason["CLIENT_READONLY"] = "Client readonly";
    DropReason["CLIENT_PERSISTENCE_CAPACITY"] = "Client persistence capacity";
    DropReason["CLIENT_STORAGE_DISABLED"] = "Client local storage disabled";
    DropReason["UNKNOWN"] = "Unknown reason";
})(DropReason || (DropReason = {}));
/**
 * Reasons for retrying telemetry
 */
export var RetryReason;
(function (RetryReason) {
    RetryReason["CLIENT_TIMEOUT"] = "Client timeout";
    RetryReason["UNKNOWN"] = "Unknown reason";
})(RetryReason || (RetryReason = {}));
/**
 * Status codes indicating that we should shutdown statsbeat
 * @internal
 */
export function isStatsbeatShutdownStatus(statusCode) {
    return (statusCode === 401 || // Unauthorized
        statusCode === 403 || // Forbidden
        statusCode === 503 // Server Unavailable
    );
}
//# sourceMappingURL=types.js.map