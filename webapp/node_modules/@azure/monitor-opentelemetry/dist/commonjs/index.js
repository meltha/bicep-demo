"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAzureMonitor = useAzureMonitor;
exports.shutdownAzureMonitor = shutdownAzureMonitor;
exports._getSdkInstance = _getSdkInstance;
const api_1 = require("@opentelemetry/api");
const api_logs_1 = require("@opentelemetry/api-logs");
const sdk_node_1 = require("@opentelemetry/sdk-node");
const config_js_1 = require("./shared/config.js");
const index_js_1 = require("./metrics/index.js");
const handler_js_1 = require("./traces/handler.js");
const index_js_2 = require("./logs/index.js");
const types_js_1 = require("./types.js");
const browserSdkLoader_js_1 = require("./browserSdkLoader/browserSdkLoader.js");
const utils_js_1 = require("./metrics/quickpulse/utils.js");
const statsbeat_js_1 = require("./utils/statsbeat.js");
const opentelemetryInstrumentationPatcher_js_1 = require("./utils/opentelemetryInstrumentationPatcher.js");
const common_js_1 = require("./utils/common.js");
process.env["AZURE_MONITOR_DISTRO_VERSION"] = types_js_1.AZURE_MONITOR_OPENTELEMETRY_VERSION;
let sdk;
let browserSdkLoader;
/**
 * Initialize Azure Monitor Distro
 * @param options - Azure Monitor OpenTelemetry Options
 */
function useAzureMonitor(options) {
    const config = new config_js_1.InternalConfig(options);
    (0, opentelemetryInstrumentationPatcher_js_1.patchOpenTelemetryInstrumentationEnable)();
    const statsbeatInstrumentations = {
        // Instrumentations
        azureSdk: config.instrumentationOptions?.azureSdk?.enabled,
        mongoDb: config.instrumentationOptions?.mongoDb?.enabled,
        mySql: config.instrumentationOptions?.mySql?.enabled,
        postgreSql: config.instrumentationOptions?.postgreSql?.enabled,
        redis: config.instrumentationOptions?.redis?.enabled,
        bunyan: config.instrumentationOptions?.bunyan?.enabled,
        winston: config.instrumentationOptions?.winston?.enabled,
    };
    const statsbeatFeatures = {
        browserSdkLoader: config.browserSdkLoaderOptions.enabled,
        aadHandling: !!config.azureMonitorExporterOptions?.credential,
        diskRetry: !config.azureMonitorExporterOptions?.disableOfflineStorage,
        rateLimitedSampler: !!config.tracesPerSecond,
        customerSdkStats: process.env[types_js_1.APPLICATIONINSIGHTS_SDKSTATS_ENABLED_PREVIEW] === "True",
    };
    (0, statsbeat_js_1.getInstance)().setStatsbeatFeatures(statsbeatInstrumentations, statsbeatFeatures);
    if (config.browserSdkLoaderOptions.enabled) {
        browserSdkLoader = new browserSdkLoader_js_1.BrowserSdkLoader(config);
    }
    // Remove global providers in OpenTelemetry, these would be overridden if present
    api_1.metrics.disable();
    api_1.trace.disable();
    api_logs_1.logs.disable();
    // Create internal handlers
    const metricHandler = new index_js_1.MetricHandler(config);
    const traceHandler = new handler_js_1.TraceHandler(config, metricHandler);
    const logHandler = new index_js_2.LogHandler(config, metricHandler);
    const instrumentations = traceHandler
        .getInstrumentations()
        .concat(logHandler.getInstrumentations());
    const resourceDetectorsList = (0, common_js_1.parseResourceDetectorsFromEnvVar)();
    // Add extra SpanProcessors, and logRecordProcessors from user configuration
    const spanProcessors = options?.spanProcessors || [];
    const logRecordProcessors = options?.logRecordProcessors || [];
    // Prepare metric readers - always include Azure Monitor
    const metricReaders = [
        metricHandler.getMetricReader(),
        ...(options?.metricReaders || []),
    ];
    // Initialize OpenTelemetry SDK
    const sdkConfig = {
        autoDetectResources: true,
        metricReaders: metricReaders,
        views: metricHandler.getViews(),
        instrumentations: instrumentations,
        logRecordProcessors: [
            logHandler.getAzureLogRecordProcessor(),
            ...logRecordProcessors,
            logHandler.getBatchLogRecordProcessor(),
        ],
        resource: config.resource,
        sampler: traceHandler.getSampler(),
        spanProcessors: [
            traceHandler.getAzureMonitorSpanProcessor(),
            ...spanProcessors,
            traceHandler.getBatchSpanProcessor(),
        ],
        resourceDetectors: resourceDetectorsList,
    };
    sdk = new sdk_node_1.NodeSDK(sdkConfig);
    (0, utils_js_1.setSdkPrefix)();
    sdk.start();
}
/**
 * Shutdown Azure Monitor Open Telemetry Distro
 * @see https://github.com/open-telemetry/opentelemetry-js/blob/0229434cb5a3179f63c021105f36270ae7897929/experimental/packages/opentelemetry-sdk-node/src/sdk.ts#L398
 */
function shutdownAzureMonitor() {
    browserSdkLoader?.dispose();
    return sdk?.shutdown();
}
/**
 * Get the internal SDK instance for testing purposes
 * @internal
 */
// eslint-disable-next-line no-underscore-dangle
function _getSdkInstance() {
    return sdk;
}
//# sourceMappingURL=index.js.map