"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonConfig = void 0;
const tslib_1 = require("tslib");
/* eslint-disable no-underscore-dangle*/
const node_fs_1 = tslib_1.__importDefault(require("node:fs"));
const node_path_1 = tslib_1.__importDefault(require("node:path"));
const index_js_1 = require("./logging/index.js");
const module_js_1 = require("./module.js");
const ENV_CONFIGURATION_FILE = "APPLICATIONINSIGHTS_CONFIGURATION_FILE";
const ENV_CONTENT = "APPLICATIONINSIGHTS_CONFIGURATION_CONTENT";
/**
 * Azure Monitor OpenTelemetry Client Configuration through JSON File
 * @internal
 */
class JsonConfig {
    /** The rate of telemetry items tracked that should be transmitted (Default 1.0) */
    samplingRatio;
    /** The maximum number of spans to sample per second. */
    tracesPerSecond;
    /** Azure Monitor Exporter Configuration */
    azureMonitorExporterOptions;
    /**
     * OpenTelemetry Instrumentations configuration included as part of Azure Monitor (azureSdk, http, mongoDb, mySql, postgreSql, redis, redis4)
     */
    instrumentationOptions;
    /** Enable Live Metrics feature */
    enableLiveMetrics;
    /** Enable Standard Metrics feature */
    enableStandardMetrics;
    /** Enable log sampling based on trace (Default true) */
    enableTraceBasedSamplingForLogs;
    /** Enable Performance Counter feature */
    enablePerformanceCounters;
    browserSdkLoaderOptions;
    static _instance;
    _tempDir;
    /** Get Singleton instance */
    static getInstance() {
        if (!JsonConfig._instance) {
            JsonConfig._instance = new JsonConfig();
        }
        return JsonConfig._instance;
    }
    /**
     * Initializes a new instance of the JsonConfig class.
     */
    constructor() {
        let jsonString = "";
        this._tempDir = "";
        const contentJsonConfig = process.env[ENV_CONTENT];
        // JSON string added directly in env variable
        if (contentJsonConfig) {
            jsonString = contentJsonConfig;
        }
        // JSON file
        else {
            const configFileName = "applicationinsights.json";
            const rootPath = node_path_1.default.join((0, module_js_1.dirName)(), "../../../"); // Root of folder (__dirname = ../dist-esm/src)
            this._tempDir = node_path_1.default.join(rootPath, configFileName); // default
            const configFile = process.env[ENV_CONFIGURATION_FILE];
            if (configFile) {
                if (node_path_1.default.isAbsolute(configFile)) {
                    this._tempDir = configFile;
                }
                else {
                    this._tempDir = node_path_1.default.join(rootPath, configFile); // Relative path to applicationinsights folder
                }
            }
            try {
                jsonString = node_fs_1.default.readFileSync(this._tempDir, "utf8");
            }
            catch (err) {
                index_js_1.Logger.getInstance().info("Failed to read JSON config file: ", err);
            }
        }
        try {
            const jsonConfig = JSON.parse(jsonString);
            this.azureMonitorExporterOptions = jsonConfig.azureMonitorExporterOptions;
            this.samplingRatio = jsonConfig.samplingRatio;
            this.tracesPerSecond = jsonConfig.tracesPerSecond;
            this.instrumentationOptions = jsonConfig.instrumentationOptions;
            this.browserSdkLoaderOptions = jsonConfig.browserSdkLoaderOptions;
            this.enableLiveMetrics = jsonConfig.enableLiveMetrics;
            this.enableStandardMetrics = jsonConfig.enableStandardMetrics;
            this.enableTraceBasedSamplingForLogs = jsonConfig.enableTraceBasedSamplingForLogs;
        }
        catch (err) {
            index_js_1.Logger.getInstance().info("Missing or invalid JSON config file: ", err);
        }
    }
}
exports.JsonConfig = JsonConfig;
//# sourceMappingURL=jsonConfig.js.map