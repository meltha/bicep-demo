{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../src/shared/config.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ResourceDetectionConfig, Resource } from \"@opentelemetry/resources\";\nimport {\n  defaultResource,\n  detectResources,\n  emptyResource,\n  envDetector,\n} from \"@opentelemetry/resources\";\nimport type {\n  BrowserSdkLoaderOptions,\n  AzureMonitorOpenTelemetryOptions,\n  InstrumentationOptions,\n} from \"../types.js\";\nimport type { AzureMonitorExporterOptions } from \"@azure/monitor-opentelemetry-exporter\";\nimport { EnvConfig } from \"./envConfig.js\";\nimport { JsonConfig } from \"./jsonConfig.js\";\nimport { Logger } from \"./logging/index.js\";\nimport {\n  azureAppServiceDetector,\n  azureFunctionsDetector,\n  azureVmDetector,\n} from \"@opentelemetry/resource-detector-azure\";\n\n/**\n * Azure Monitor OpenTelemetry Client Configuration\n */\nexport class InternalConfig implements AzureMonitorOpenTelemetryOptions {\n  /** The rate of telemetry items tracked that should be transmitted (Default 1.0) */\n  public samplingRatio: number;\n  /** The maximum number of spans to sample per second. */\n  public tracesPerSecond?: number;\n  /** Azure Monitor Exporter Configuration */\n  public azureMonitorExporterOptions: AzureMonitorExporterOptions;\n  /**\n   * OpenTelemetry Instrumentations configuration included as part of Azure Monitor (azureSdk, http, mongoDb, mySql, postgreSql, redis, redis4)\n   */\n  public instrumentationOptions: InstrumentationOptions;\n  /** Enable Live Metrics feature */\n  enableLiveMetrics?: boolean;\n  /** Enable Standard Metrics feature */\n  enableStandardMetrics?: boolean;\n  /** Enable log sampling based on trace (Default true) */\n  enableTraceBasedSamplingForLogs?: boolean;\n  /** Enable Performance Counter feature */\n  enablePerformanceCounters?: boolean;\n  /** Metric export interval in milliseconds */\n  public metricExportIntervalMillis: number;\n\n  private _resource: Resource = emptyResource();\n\n  public set resource(resource: Resource) {\n    this._resource = this._resource.merge(resource);\n  }\n\n  /**\n   *Get OpenTelemetry Resource\n   */\n  public get resource(): Resource {\n    return this._resource;\n  }\n\n  public browserSdkLoaderOptions: BrowserSdkLoaderOptions;\n\n  /**\n   * Initializes a new instance of the AzureMonitorOpenTelemetryOptions class.\n   */\n  constructor(options?: AzureMonitorOpenTelemetryOptions) {\n    // Default values\n    this.azureMonitorExporterOptions = {};\n    this.samplingRatio = 1;\n    this.tracesPerSecond = undefined;\n    this.enableLiveMetrics = true;\n    this.enableStandardMetrics = true;\n    this.enableTraceBasedSamplingForLogs = false;\n    this.enablePerformanceCounters = true;\n    this.metricExportIntervalMillis = this.calculateMetricExportInterval();\n    this.instrumentationOptions = {\n      http: { enabled: true },\n      azureSdk: { enabled: true },\n      mongoDb: { enabled: true },\n      mySql: { enabled: true },\n      postgreSql: { enabled: true },\n      redis: { enabled: true },\n      redis4: { enabled: true },\n    };\n    this._setDefaultResource();\n    this.browserSdkLoaderOptions = {\n      enabled: false,\n      connectionString: \"\",\n    };\n\n    if (options) {\n      // Merge default with provided options\n      this.azureMonitorExporterOptions = Object.assign(\n        this.azureMonitorExporterOptions,\n        options.azureMonitorExporterOptions,\n      );\n      this.instrumentationOptions = Object.assign(\n        this.instrumentationOptions,\n        options.instrumentationOptions,\n      );\n      this.resource = Object.assign(this.resource, options.resource);\n      this.samplingRatio =\n        options.samplingRatio !== undefined ? options.samplingRatio : this.samplingRatio;\n      this.tracesPerSecond =\n        options.tracesPerSecond !== undefined ? options.tracesPerSecond : this.tracesPerSecond;\n      this.browserSdkLoaderOptions = Object.assign(\n        this.browserSdkLoaderOptions,\n        options.browserSdkLoaderOptions,\n      );\n      this.enableLiveMetrics =\n        options.enableLiveMetrics !== undefined\n          ? options.enableLiveMetrics\n          : this.enableLiveMetrics;\n      this.enableStandardMetrics =\n        options.enableStandardMetrics !== undefined\n          ? options.enableStandardMetrics\n          : this.enableStandardMetrics;\n      this.enableTraceBasedSamplingForLogs =\n        options.enableTraceBasedSamplingForLogs !== undefined\n          ? options.enableTraceBasedSamplingForLogs\n          : this.enableTraceBasedSamplingForLogs;\n      this.enablePerformanceCounters =\n        options.enablePerformanceCounters !== undefined\n          ? options.enablePerformanceCounters\n          : this.enablePerformanceCounters;\n    }\n    // JSON configuration will take precedence over options provided\n    this._mergeJsonConfig();\n    // ENV configuration will take precedence over other configurations\n    this._mergeEnvConfig();\n  }\n\n  private _mergeEnvConfig(): void {\n    const envConfig = EnvConfig.getInstance();\n    this.samplingRatio =\n      envConfig.samplingRatio !== undefined ? envConfig.samplingRatio : this.samplingRatio;\n    this.tracesPerSecond =\n      envConfig.tracesPerSecond !== undefined ? envConfig.tracesPerSecond : this.tracesPerSecond;\n  }\n\n  private _mergeJsonConfig(): void {\n    try {\n      const jsonConfig = JsonConfig.getInstance();\n      this.samplingRatio =\n        jsonConfig.samplingRatio !== undefined ? jsonConfig.samplingRatio : this.samplingRatio;\n      this.tracesPerSecond =\n        jsonConfig.tracesPerSecond !== undefined\n          ? jsonConfig.tracesPerSecond\n          : this.tracesPerSecond;\n      this.browserSdkLoaderOptions = Object.assign(\n        this.browserSdkLoaderOptions,\n        jsonConfig.browserSdkLoaderOptions,\n      );\n      this.enableLiveMetrics =\n        jsonConfig.enableLiveMetrics !== undefined\n          ? jsonConfig.enableLiveMetrics\n          : this.enableLiveMetrics;\n      this.enableStandardMetrics =\n        jsonConfig.enableStandardMetrics !== undefined\n          ? jsonConfig.enableStandardMetrics\n          : this.enableStandardMetrics;\n      this.enableTraceBasedSamplingForLogs =\n        jsonConfig.enableTraceBasedSamplingForLogs !== undefined\n          ? jsonConfig.enableTraceBasedSamplingForLogs\n          : this.enableTraceBasedSamplingForLogs;\n      this.azureMonitorExporterOptions = Object.assign(\n        this.azureMonitorExporterOptions,\n        jsonConfig.azureMonitorExporterOptions,\n      );\n      this.instrumentationOptions = Object.assign(\n        this.instrumentationOptions,\n        jsonConfig.instrumentationOptions,\n      );\n    } catch (error) {\n      Logger.getInstance().error(\"Failed to load JSON config file values.\", error);\n    }\n  }\n\n  private _setDefaultResource(): void {\n    let resource = defaultResource();\n    // Load resource attributes from env\n    const detectResourceConfig: ResourceDetectionConfig = {\n      detectors: [envDetector],\n    };\n    const envResource = detectResources(detectResourceConfig);\n    resource = resource.merge(envResource);\n\n    // Load resource attributes from Azure\n    const azureResource: Resource = detectResources({\n      detectors: [azureAppServiceDetector, azureFunctionsDetector],\n    });\n    this._resource = resource.merge(azureResource);\n\n    // Handle VM resource detection asynchronously to avoid warnings\n    // about accessing resource attributes before async attributes are settled\n    this._initializeVmResourceAsync();\n  }\n\n  /**\n   * Initialize VM resource detection asynchronously to avoid warnings\n   * about accessing resource attributes before async attributes settle\n   */\n  private _initializeVmResourceAsync(): void {\n    const vmResource = detectResources({\n      detectors: [azureVmDetector],\n    });\n\n    // Don't wait for VM resource detection to complete during initialization\n    // This prevents warnings about accessing resource attributes before async attributes are settled\n    if (vmResource.asyncAttributesPending) {\n      void vmResource\n        .waitForAsyncAttributes?.()\n        .then(() => {\n          this._resource = this._resource.merge(vmResource);\n          return;\n        })\n        .catch(() => {\n          // Silently ignore VM detection errors to avoid unnecessary warnings\n          // VM detection is optional and failures shouldn't impact core functionality\n        });\n    } else {\n      // If VM detection completed synchronously, merge immediately\n      this._resource = this._resource.merge(vmResource);\n    }\n  }\n\n  public calculateMetricExportInterval(options?: { collectionInterval: number }): number {\n    const defaultInterval = 60000; // 60 seconds\n\n    // Prioritize OTEL_METRIC_EXPORT_INTERVAL env var\n    if (process.env.OTEL_METRIC_EXPORT_INTERVAL) {\n      const envInterval = parseInt(process.env.OTEL_METRIC_EXPORT_INTERVAL.trim(), 10);\n      if (!isNaN(envInterval) && envInterval > 0) {\n        return envInterval;\n      }\n    }\n\n    // Then use options if provided\n    if (options?.collectionInterval) {\n      return options.collectionInterval;\n    }\n\n    // Default fallback\n    return defaultInterval;\n  }\n}\n"]}