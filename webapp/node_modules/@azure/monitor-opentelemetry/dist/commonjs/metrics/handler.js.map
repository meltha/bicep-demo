{"version":3,"file":"handler.js","sourceRoot":"","sources":["../../../src/metrics/handler.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,0FAAmF;AAEnF,4DAA2E;AAG3E,6DAAuD;AAEvD,yCAAsE;AACtE,gEAA0D;AAC1D,qEAAqE;AAErE;;GAEG;AACH,MAAa,aAAa;IAChB,cAAc,CAA6B;IAC3C,aAAa,CAAgC;IAC7C,gBAAgB,CAAmB;IACnC,oBAAoB,CAA6B;IACjD,YAAY,CAAe;IAC3B,OAAO,CAAiB;IACxB,MAAM,CAAgB;IAE9B;;;;OAIG;IACH,YAAY,MAAsB;QAChC,MAAM,eAAe,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,8JAA8J;QAC9J,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,MAAM,CAAC,sBAAsB,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC;YACpD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,gDAAgD,EAAE,CAAC,CAAC;QACpF,CAAC;QACD,IAAI,MAAM,CAAC,sBAAsB,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC;YAChD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,2CAA2C,EAAE,CAAC,CAAC;QAC/E,CAAC;QACD,IAAI,MAAM,CAAC,sBAAsB,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC;YACnD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,8CAA8C,EAAE,CAAC,CAAC;QAClF,CAAC;QACD,IAAI,MAAM,CAAC,sBAAsB,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC;YACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,sCAAsC,EAAE,CAAC,CAAC;QAC1E,CAAC;QACD,IAAI,MAAM,CAAC,sBAAsB,CAAC,UAAU,EAAE,OAAO,EAAE,CAAC;YACtD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,mCAAmC,EAAE,CAAC,CAAC;QACvE,CAAC;QACD,IAAI,MAAM,CAAC,sBAAsB,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC;YAClD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,wCAAwC,EAAE,CAAC,CAAC;QAC5E,CAAC;QACD,IAAI,MAAM,CAAC,sBAAsB,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC;YACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,4CAA4C,EAAE,CAAC,CAAC;QAChF,CAAC;QACD,IAAI,CAAC,cAAc,GAAG,IAAI,2DAA0B,CAAC,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC;QAC/F,MAAM,mBAAmB,GAAyC;YAChE,QAAQ,EAAE,IAAI,CAAC,cAAqB;YACpC,oBAAoB,EAAE,IAAI,CAAC,OAAO,CAAC,0BAA0B,IAAI,eAAe;SACjF,CAAC;QACF,IAAI,CAAC,aAAa,GAAG,IAAI,2CAA6B,CAAC,mBAAmB,CAAC,CAAC;QAE5E,IACE,IAAI,CAAC,OAAO,CAAC,qBAAqB;YAClC,CAAC,OAAO,CAAC,GAAG,CAAC,mDAAwC,CAAC,EACtD,CAAC;YACD,IAAI,CAAC,gBAAgB,GAAG,IAAI,oCAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5D,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;YACnC,IAAI,CAAC,YAAY,GAAG,IAAI,4BAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpD,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,CAAC,yBAAyB,EAAE,CAAC;YAC3C,IAAI,CAAC,oBAAoB,GAAG,IAAI,kDAAyB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;IAEM,eAAe;QACpB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,mBAAmB,CAAC,IAAU;QACnC,IAAI,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IAEM,UAAU,CAAC,IAAkB;QAClC,IAAI,CAAC,gBAAgB,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,oBAAoB,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;IAEM,SAAS,CAAC,SAAuB;QACtC,IAAI,CAAC,gBAAgB,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;QAC5C,IAAI,CAAC,YAAY,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;QACxC,IAAI,CAAC,oBAAoB,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,4DAA4D;IACrD,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,gBAAgB,EAAE,QAAQ,EAAE,CAAC;QAClC,IAAI,CAAC,YAAY,EAAE,QAAQ,EAAE,CAAC;QAC9B,IAAI,CAAC,oBAAoB,EAAE,QAAQ,EAAE,CAAC;IACxC,CAAC;CACF;AA9FD,sCA8FC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AzureMonitorMetricExporter } from \"@azure/monitor-opentelemetry-exporter\";\nimport type { PeriodicExportingMetricReaderOptions, ViewOptions } from \"@opentelemetry/sdk-metrics\";\nimport { PeriodicExportingMetricReader } from \"@opentelemetry/sdk-metrics\";\nimport type { SdkLogRecord } from \"@opentelemetry/sdk-logs\";\nimport type { InternalConfig } from \"../shared/config.js\";\nimport { StandardMetrics } from \"./standardMetrics.js\";\nimport type { ReadableSpan, Span } from \"@opentelemetry/sdk-trace-base\";\nimport { APPLICATION_INSIGHTS_NO_STANDARD_METRICS } from \"./types.js\";\nimport { LiveMetrics } from \"./quickpulse/liveMetrics.js\";\nimport { PerformanceCounterMetrics } from \"./performanceCounters.js\";\n\n/**\n * Azure Monitor OpenTelemetry Metric Handler\n */\nexport class MetricHandler {\n  private _azureExporter: AzureMonitorMetricExporter;\n  private _metricReader: PeriodicExportingMetricReader;\n  private _standardMetrics?: StandardMetrics;\n  private _performanceCounters?: PerformanceCounterMetrics;\n  private _liveMetrics?: LiveMetrics;\n  private _config: InternalConfig;\n  private _views: ViewOptions[];\n\n  /**\n   * Initializes a new instance of the MetricHandler class.\n   * @param config - Distro configuration.\n   * @param options - Metric Handler options.\n   */\n  constructor(config: InternalConfig) {\n    const defaultInterval = 60000;\n    this._config = config;\n    // Adding Views of instrumentations will allow customer to add Metric Readers after, and get access to previously created metrics using the views shared state\n    this._views = [];\n    if (config.instrumentationOptions.azureSdk?.enabled) {\n      this._views.push({ meterName: \"@azure/opentelemetry-instrumentation-azure-sdk\" });\n    }\n    if (config.instrumentationOptions.http?.enabled) {\n      this._views.push({ meterName: \"@azure/opentelemetry-instrumentation-http\" });\n    }\n    if (config.instrumentationOptions.mongoDb?.enabled) {\n      this._views.push({ meterName: \"@azure/opentelemetry-instrumentation-mongodb\" });\n    }\n    if (config.instrumentationOptions.mySql?.enabled) {\n      this._views.push({ meterName: \"@opentelemetry/instrumentation-mysql\" });\n    }\n    if (config.instrumentationOptions.postgreSql?.enabled) {\n      this._views.push({ meterName: \"@opentelemetry/instrumentation-pg\" });\n    }\n    if (config.instrumentationOptions.redis4?.enabled) {\n      this._views.push({ meterName: \"@opentelemetry/instrumentation-redis-4\" });\n    }\n    if (config.instrumentationOptions.redis?.enabled) {\n      this._views.push({ meterName: \"@azure/opentelemetry-instrumentation-redis\" });\n    }\n    this._azureExporter = new AzureMonitorMetricExporter(this._config.azureMonitorExporterOptions);\n    const metricReaderOptions: PeriodicExportingMetricReaderOptions = {\n      exporter: this._azureExporter as any,\n      exportIntervalMillis: this._config.metricExportIntervalMillis || defaultInterval,\n    };\n    this._metricReader = new PeriodicExportingMetricReader(metricReaderOptions);\n\n    if (\n      this._config.enableStandardMetrics &&\n      !process.env[APPLICATION_INSIGHTS_NO_STANDARD_METRICS]\n    ) {\n      this._standardMetrics = new StandardMetrics(this._config);\n    }\n    if (this._config.enableLiveMetrics) {\n      this._liveMetrics = new LiveMetrics(this._config);\n    }\n    if (this._config.enablePerformanceCounters) {\n      this._performanceCounters = new PerformanceCounterMetrics(this._config);\n    }\n  }\n\n  public getMetricReader(): PeriodicExportingMetricReader {\n    return this._metricReader;\n  }\n\n  public getViews(): ViewOptions[] {\n    return this._views;\n  }\n\n  public markSpanAsProcessed(span: Span): void {\n    this._standardMetrics?.markSpanAsProcessed(span);\n  }\n\n  public recordSpan(span: ReadableSpan): void {\n    this._standardMetrics?.recordSpan(span);\n    this._liveMetrics?.recordSpan(span);\n    this._performanceCounters?.recordSpan(span);\n  }\n\n  public recordLog(logRecord: SdkLogRecord): void {\n    this._standardMetrics?.recordLog(logRecord);\n    this._liveMetrics?.recordLog(logRecord);\n    this._performanceCounters?.recordLog(logRecord);\n  }\n\n  /**\n   * Shutdown handler\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async shutdown(): Promise<void> {\n    this._standardMetrics?.shutdown();\n    this._liveMetrics?.shutdown();\n    this._performanceCounters?.shutdown();\n  }\n}\n"]}