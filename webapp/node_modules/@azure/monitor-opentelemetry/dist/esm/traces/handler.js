// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { createAzureSdkInstrumentation } from "@azure/opentelemetry-instrumentation-azure-sdk";
import { AzureMonitorTraceExporter, RateLimitedSampler, } from "@azure/monitor-opentelemetry-exporter";
import { BatchSpanProcessor } from "@opentelemetry/sdk-trace-base";
import { HttpInstrumentation } from "@opentelemetry/instrumentation-http";
import { MongoDBInstrumentation } from "@opentelemetry/instrumentation-mongodb";
import { MySQLInstrumentation } from "@opentelemetry/instrumentation-mysql";
import { PgInstrumentation } from "@opentelemetry/instrumentation-pg";
import { RedisInstrumentation } from "@opentelemetry/instrumentation-redis";
import { RedisInstrumentation as Redis4Instrumentation } from "@opentelemetry/instrumentation-redis-4";
import { ignoreOutgoingRequestHook } from "../utils/common.js";
import { AzureMonitorSpanProcessor } from "./spanProcessor.js";
import { AzureFunctionsHook } from "./azureFnHook.js";
import { ApplicationInsightsSampler } from "./sampler.js";
/**
 * Azure Monitor OpenTelemetry Trace Handler
 */
export class TraceHandler {
    _batchSpanProcessor;
    _azureSpanProcessor;
    _azureExporter;
    _instrumentations;
    _config;
    _metricHandler;
    _azureFunctionsHook;
    _sampler;
    /**
     * Initializes a new instance of the TraceHandler class.
     * @param _config - Configuration.
     * @param _metricHandler - MetricHandler.
     */
    constructor(config, metricHandler) {
        this._config = config;
        this._metricHandler = metricHandler;
        this._instrumentations = [];
        // Check sampler precedence
        if (this._config.tracesPerSecond && this._config.tracesPerSecond >= 0) {
            // If tracesPerSecond is set, use RateLimitedSampler
            this._sampler = new RateLimitedSampler(this._config.tracesPerSecond);
        }
        else {
            // Otherwise, use PercentageSampler with samplingRatio
            this._sampler = new ApplicationInsightsSampler(this._config.samplingRatio);
        }
        this._azureExporter = new AzureMonitorTraceExporter(this._config.azureMonitorExporterOptions);
        const bufferConfig = {
            maxExportBatchSize: 512,
            scheduledDelayMillis: 5000,
            exportTimeoutMillis: 30000,
            maxQueueSize: 2048,
        };
        this._batchSpanProcessor = new BatchSpanProcessor(this._azureExporter, bufferConfig);
        this._azureSpanProcessor = new AzureMonitorSpanProcessor(this._metricHandler);
        this._azureFunctionsHook = new AzureFunctionsHook();
        this._initializeInstrumentations();
    }
    getSampler() {
        return this._sampler;
    }
    getBatchSpanProcessor() {
        return this._batchSpanProcessor;
    }
    getAzureMonitorSpanProcessor() {
        return this._azureSpanProcessor;
    }
    getInstrumentations() {
        return this._instrumentations;
    }
    /**
     * Shutdown handler
     */
    // eslint-disable-next-line @typescript-eslint/require-await
    async shutdown() {
        this._azureFunctionsHook.shutdown();
    }
    /**
     * Start auto collection of telemetry
     */
    _initializeInstrumentations() {
        if (this._config.instrumentationOptions.http?.enabled) {
            const httpinstrumentationOptions = this._config.instrumentationOptions
                .http;
            const providedIgnoreOutgoingRequestHook = httpinstrumentationOptions.ignoreOutgoingRequestHook;
            const mergedIgnoreOutgoingRequestHook = (request) => {
                const result = ignoreOutgoingRequestHook(request);
                if (!result) {
                    // Not internal call
                    if (providedIgnoreOutgoingRequestHook) {
                        // Provided hook in config
                        return providedIgnoreOutgoingRequestHook(request);
                    }
                }
                return result;
            };
            httpinstrumentationOptions.ignoreOutgoingRequestHook = mergedIgnoreOutgoingRequestHook;
            this._instrumentations.push(new HttpInstrumentation(this._config.instrumentationOptions.http));
        }
        if (this._config.instrumentationOptions.azureSdk?.enabled) {
            this._instrumentations.push(createAzureSdkInstrumentation(this._config.instrumentationOptions.azureSdk));
        }
        if (this._config.instrumentationOptions.mongoDb?.enabled) {
            this._instrumentations.push(new MongoDBInstrumentation(this._config.instrumentationOptions.mongoDb));
        }
        if (this._config.instrumentationOptions.mySql?.enabled) {
            this._instrumentations.push(new MySQLInstrumentation(this._config.instrumentationOptions.mySql));
        }
        if (this._config.instrumentationOptions.postgreSql?.enabled) {
            this._instrumentations.push(new PgInstrumentation(this._config.instrumentationOptions.postgreSql));
        }
        if (this._config.instrumentationOptions.redis?.enabled) {
            this._instrumentations.push(new RedisInstrumentation(this._config.instrumentationOptions.redis));
        }
        if (this._config.instrumentationOptions.redis4?.enabled) {
            this._instrumentations.push(new Redis4Instrumentation(this._config.instrumentationOptions.redis4));
        }
    }
}
//# sourceMappingURL=handler.js.map