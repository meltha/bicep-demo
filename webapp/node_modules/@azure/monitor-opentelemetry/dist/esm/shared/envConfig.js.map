{"version":3,"file":"envConfig.js","sourceRoot":"","sources":["../../../src/shared/envConfig.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AAC5C,MAAM,cAAc,GAAG,qBAAqB,CAAC;AAC7C,MAAM,kBAAkB,GAAG,yBAAyB,CAAC;AACrD,MAAM,oBAAoB,GAAG,wBAAwB,CAAC;AACtD,MAAM,wBAAwB,GAAG,4BAA4B,CAAC;AAE9D;;;GAGG;AACH,MAAM,OAAO,SAAS;IACpB,mFAAmF;IAC5E,aAAa,CAAU;IAC9B,2EAA2E;IACpE,eAAe,CAAU;IAExB,MAAM,CAAC,QAAQ,CAAY;IAEnC,6BAA6B;IACtB,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;YACxB,SAAS,CAAC,QAAQ,GAAG,IAAI,SAAS,EAAE,CAAC;QACvC,CAAC;QACD,OAAO,SAAS,CAAC,QAAQ,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH;QACE,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC/C,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACtD,IAAI,UAAU,IAAI,aAAa,EAAE,CAAC;YAChC,IAAI,UAAU,KAAK,oBAAoB,IAAI,UAAU,KAAK,wBAAwB,EAAE,CAAC;gBACnF,MAAM,QAAQ,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;gBACvC,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,QAAQ,GAAG,CAAC,EAAE,CAAC;oBACpC,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CACvB,gFAAgF,CACjF,CAAC;gBACJ,CAAC;qBAAM,CAAC;oBACN,IAAI,UAAU,KAAK,oBAAoB,EAAE,CAAC;wBACxC,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;oBAClC,CAAC;yBAAM,IAAI,UAAU,KAAK,wBAAwB,EAAE,CAAC;wBACnD,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;oBAChC,CAAC;gBACH,CAAC;YACH,CAAC;YACD,wBAAwB;iBACnB,CAAC;gBACJ,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CACvB,8CAA8C,UAAU,2BAA2B,oBAAoB,KAAK,wBAAwB,GAAG,CACxI,CAAC;YACJ,CAAC;QACH,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AzureMonitorOpenTelemetryOptions } from \"../types.js\";\nimport { Logger } from \"./logging/index.js\";\nconst TRACES_SAMPLER = \"OTEL_TRACES_SAMPLER\";\nconst TRACES_SAMPLER_ARG = \"OTEL_TRACES_SAMPLER_ARG\";\nconst RATE_LIMITED_SAMPLER = \"microsoft.rate_limited\";\nconst FIXED_PERCENTAGE_SAMPLER = \"microsoft.fixed_percentage\";\n\n/**\n * Azure Monitor OpenTelemetry Client Configuration through Env variables\n * @internal\n */\nexport class EnvConfig implements AzureMonitorOpenTelemetryOptions {\n  /** The rate of telemetry items tracked that should be transmitted (Default 1.0) */\n  public samplingRatio?: number;\n  /** The maximum number of spans to sample per second. (Default undefined)*/\n  public tracesPerSecond?: number;\n\n  private static instance: EnvConfig;\n\n  /** Get Singleton instance */\n  public static getInstance(): EnvConfig {\n    if (!EnvConfig.instance) {\n      EnvConfig.instance = new EnvConfig();\n    }\n    return EnvConfig.instance;\n  }\n\n  /**\n   * Initializes a new instance of the EnvConfig class.\n   */\n  constructor() {\n    const envSampler = process.env[TRACES_SAMPLER];\n    const envSamplerArg = process.env[TRACES_SAMPLER_ARG];\n    if (envSampler && envSamplerArg) {\n      if (envSampler === RATE_LIMITED_SAMPLER || envSampler === FIXED_PERCENTAGE_SAMPLER) {\n        const argValue = Number(envSamplerArg);\n        if (isNaN(argValue) || argValue < 0) {\n          Logger.getInstance().warn(\n            \"Invalid value for OTEL_TRACES_SAMPLER_ARG. It should be a non-negative number.\",\n          );\n        } else {\n          if (envSampler === RATE_LIMITED_SAMPLER) {\n            this.tracesPerSecond = argValue;\n          } else if (envSampler === FIXED_PERCENTAGE_SAMPLER) {\n            this.samplingRatio = argValue;\n          }\n        }\n      }\n      // Not supported sampler\n      else {\n        Logger.getInstance().warn(\n          `Unsupported value for OTEL_TRACES_SAMPLER: ${envSampler}. Supported values are: ${RATE_LIMITED_SAMPLER}, ${FIXED_PERCENTAGE_SAMPLER}.`,\n        );\n      }\n    }\n  }\n}\n"]}